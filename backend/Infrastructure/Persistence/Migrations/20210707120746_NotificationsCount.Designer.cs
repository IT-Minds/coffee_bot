// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210707120746_NotificationsCount")]
    partial class NotificationsCount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.ChannelMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<bool>("OnPause")
                        .HasColumnType("bit");

                    b.Property<string>("SlackUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.ToTable("ChannelMembers");
                });

            modelBuilder.Entity("Domain.Entities.ChannelSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int");

                    b.Property<bool>("IndividualMessage")
                        .HasColumnType("bit");

                    b.Property<string>("SlackChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlackChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartsDay")
                        .HasColumnType("int");

                    b.Property<int>("WeekRepeat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChannelSettings");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SlackChannelId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.ToTable("CoffeeRounds");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRoundGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoffeeRoundId")
                        .HasColumnType("int");

                    b.Property<bool>("HasMet")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationCount")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlackMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeRoundId");

                    b.ToTable("CoffeeRoundGroups");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRoundGroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoffeeRoundGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SlackMemberId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeRoundGroupId");

                    b.ToTable("CoffeeRoundGroupMembers");
                });

            modelBuilder.Entity("Domain.Entities.ChannelMember", b =>
                {
                    b.HasOne("Domain.Entities.ChannelSettings", "ChannelSettings")
                        .WithMany("ChannelMembers")
                        .HasForeignKey("ChannelSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelSettings");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRound", b =>
                {
                    b.HasOne("Domain.Entities.ChannelSettings", "ChannelSettings")
                        .WithMany()
                        .HasForeignKey("ChannelSettingsId");

                    b.Navigation("ChannelSettings");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRoundGroup", b =>
                {
                    b.HasOne("Domain.Entities.CoffeeRound", "CoffeeRound")
                        .WithMany("CoffeeRoundGroups")
                        .HasForeignKey("CoffeeRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeRound");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRoundGroupMember", b =>
                {
                    b.HasOne("Domain.Entities.CoffeeRoundGroup", "CoffeeRoundGroup")
                        .WithMany("CoffeeRoundGroupMembers")
                        .HasForeignKey("CoffeeRoundGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeRoundGroup");
                });

            modelBuilder.Entity("Domain.Entities.ChannelSettings", b =>
                {
                    b.Navigation("ChannelMembers");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRound", b =>
                {
                    b.Navigation("CoffeeRoundGroups");
                });

            modelBuilder.Entity("Domain.Entities.CoffeeRoundGroup", b =>
                {
                    b.Navigation("CoffeeRoundGroupMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
