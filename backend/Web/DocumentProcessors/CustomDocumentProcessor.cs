using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Application.Common.Exceptions;
using Application.Common.Interfaces.Hubs;
using Application.Prizes.Common;
using NSwag.Generation.Processors;
using NSwag.Generation.Processors.Contexts;

/// <summary>
/// Add missing models / enums to be generated by Nswag.
/// Generally all models connected to Controllers are automatically mapped.
/// </summary>

namespace Web.DocumentProcessors
{
  public class CustomDocumentProcessor : IDocumentProcessor
  {
    public void Process(DocumentProcessorContext context)
    {
      var type = typeof(CommandErrorCode);

      if (!context.SchemaResolver.HasSchema(type, true))
      {
        context.SchemaGenerator.Generate(type, context.SchemaResolver);
      }
    }

    public static Dictionary<string, Dictionary<string, IEnumerable<Type>>> AllMyHubs()
    {
      var dict = new Dictionary<string, Dictionary<string, IEnumerable<Type>>>();
      dict.Add("prize", MyHubs(typeof(IPrizeHubService)));
      return dict;
    }

    public static Dictionary<string, IEnumerable<Type>> MyHubs(Type type)
    {
      var dict = new Dictionary<string, IEnumerable<Type>>();
      foreach (MethodInfo method in type.GetMethods())
      {
        dict.Add(method.Name, method.GetParameters().Select(x => x.ParameterType));
      }
      return dict;
    }
  }
}
