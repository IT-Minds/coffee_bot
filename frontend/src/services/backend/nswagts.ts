/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ClientConfiguration {
  constructor(public accessToken: string) {}
}

export class ClientBase {
  constructor(private clientConfiguration: ClientConfiguration) {}
  private cacheableResponse = false;
  private cacheStrategy: "CacheFirst" | "NetworkFirst" = "NetworkFirst";
  private cacheAllowStatuses: number[] = [200];
  private cacheableOptions: RequestInit = null;
  private responseCallbackMap: Record<
    number,
    (response: Response) => void | Promise<void>
  > = null;
  private signal: AbortSignal = null;

  public setCacheableResponse(
    cacheStrategy: ClientBase["cacheStrategy"] = "NetworkFirst",
    cacheAllowStatuses: ClientBase["cacheAllowStatuses"] = [200]
  ) {
    this.cacheableResponse = true;
    this.cacheStrategy = cacheStrategy;
    this.cacheAllowStatuses = cacheAllowStatuses;
  }

  public setStatusCallbackMap(
    responseCallbackMap: ClientBase["responseCallbackMap"]
  ) {
    this.responseCallbackMap = responseCallbackMap;
  }

  public setAbortSignal(signal: AbortSignal) {
    this.signal = signal;
  }

  protected async transformOptions(options: RequestInit): Promise<RequestInit> {
    if (this.signal != null) options.signal = this.signal;

    if (options.headers && this.clientConfiguration.accessToken) {
      (options.headers as Record<string, string>)["Authorization"] =
        "Bearer " + this.clientConfiguration.accessToken;
    }

    if (this.cacheableResponse) {
      this.cacheableOptions = options;
    }

    return options;
  }

  protected async transformResult(
    url: string,
    networkResponse: Response,
    clientProcessCallback: (response: Response) => Promise<any>
  ) {
    const response = await this.checkCache(url, networkResponse);
    const hasBeenHandled = await this.checkStatusCallback(response);

    if (hasBeenHandled !== null) {
      return hasBeenHandled;
      // return clientProcessCallback(response).catch((err) => {
      //   console.error("nswag status had been handled", response.status);
      //   console.error(err);
      //   return null;
      // });
    }
    return await clientProcessCallback(response);
  }

  private async putToCache(
    request: Request,
    response: Response
  ): Promise<Response> {
    const cache = await caches.open("nswagts.v1");
    const cloned = response.clone();
    await cache.put(request, response);

    return cloned;
  }

  private async checkCache(url: string, networkResponse: Response) {
    let response: Response = networkResponse;
    if (!process.browser || !this.cacheableResponse) {
      return response;
    }
    console.debug("NswagTs transformResult cacheableResponse executing...");

    const request = new Request(url, this.cacheableOptions);

    const cacheResponse = await caches.match(request);

    const networkOk = this.cacheAllowStatuses.includes(
      networkResponse?.status ?? 0
    );
    const cacheOk = this.cacheAllowStatuses.includes(
      cacheResponse?.status ?? 0
    );

    if (this.cacheStrategy === "CacheFirst") {
      if (cacheOk) {
        console.debug(
          "NswagTs transformResult cacheableResponse cache first using cache",
          cacheResponse
        );
        response = cacheResponse;
      } else {
        console.debug(
          "NswagTs transformResult cacheableResponse cache first using network",
          networkResponse
        );
        response = networkOk
          ? await this.putToCache(request, networkResponse)
          : networkResponse;
      }
    } else if (this.cacheStrategy === "NetworkFirst") {
      if (networkOk) {
        console.debug(
          "NswagTs transformResult cacheableResponse network first using network ok",
          networkResponse
        );
        response = await this.putToCache(request, networkResponse);
      } else if (cacheOk) {
        console.debug(
          "NswagTs transformResult cacheableResponse network first using cache",
          cacheResponse
        );
        response = cacheResponse;
      } else {
        console.debug(
          "NswagTs transformResult cacheableResponse network first using network failure",
          networkResponse
        );
        response = networkResponse;
      }
    }
    this.cacheableResponse = false;
  }

  private async checkStatusCallback(response: Response): Promise<unknown> {
    if (this.responseCallbackMap == null) return null;

    if (
      Object.keys(this.responseCallbackMap).includes(response.status.toString())
    ) {
      const db = this.responseCallbackMap[response.status];

      const result = await db(response);

      return result;
    }

    return null;
  }
}

export interface IAuthClient {
    checkAuth(): Promise<AuthUser>;
    login(): Promise<boolean>;
    loginCallback(code?: string | null | undefined, state?: string | null | undefined): Promise<boolean>;
}

export class AuthClient extends ClientBase implements IAuthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    checkAuth(): Promise<AuthUser> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCheckAuth(_response));
        });
    }

    protected processCheckAuth(response: Response): Promise<AuthUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthUser>(<any>null);
    }

    login(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLogin(_response));
        });
    }

    protected processLogin(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    loginCallback(code?: string | null | undefined, state?: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Auth/login-callback?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (state !== undefined && state !== null)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processLoginCallback(_response));
        });
    }

    protected processLoginCallback(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IChannelClient {
    getMyChannels(): Promise<ChannelSettingsIdDto[]>;
    updateChannelState(command: UpdateChannelPauseCommand): Promise<FileResponse>;
    updateChannelSettings(id: number, command: UpdateChannelSettingsCommand): Promise<FileResponse>;
    getRounds(id: number): Promise<RoundSnipDto[]>;
    getActiveRound(id: number): Promise<ActiveRoundDto>;
}

export class ChannelClient extends ClientBase implements IChannelClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getMyChannels(): Promise<ChannelSettingsIdDto[]> {
        let url_ = this.baseUrl + "/api/Channel/MyChannels";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMyChannels(_response));
        });
    }

    protected processGetMyChannels(response: Response): Promise<ChannelSettingsIdDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChannelSettingsIdDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ChannelSettingsIdDto[]>(<any>null);
    }

    updateChannelState(command: UpdateChannelPauseCommand): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Channel/UpdateChannelState";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateChannelState(_response));
        });
    }

    protected processUpdateChannelState(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    updateChannelSettings(id: number, command: UpdateChannelSettingsCommand): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Channel/UpdateChannelSettings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateChannelSettings(_response));
        });
    }

    protected processUpdateChannelSettings(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    getRounds(id: number): Promise<RoundSnipDto[]> {
        let url_ = this.baseUrl + "/api/Channel/{id}/rounds";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetRounds(_response));
        });
    }

    protected processGetRounds(response: Response): Promise<RoundSnipDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoundSnipDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoundSnipDto[]>(<any>null);
    }

    getActiveRound(id: number): Promise<ActiveRoundDto> {
        let url_ = this.baseUrl + "/api/Channel/{id}/rounds/active";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetActiveRound(_response));
        });
    }

    protected processGetActiveRound(response: Response): Promise<ActiveRoundDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActiveRoundDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ActiveRoundDto>(<any>null);
    }
}

export interface IEventClient {
    allEventSubscriber(body: EventInput): Promise<string>;
}

export class EventClient extends ClientBase implements IEventClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    allEventSubscriber(body: EventInput): Promise<string> {
        let url_ = this.baseUrl + "/api/Event";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAllEventSubscriber(_response));
        });
    }

    protected processAllEventSubscriber(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export interface IGalleryClient {
    getAll(channelId?: number | undefined): Promise<StandardGroupDto[]>;
}

export class GalleryClient extends ClientBase implements IGalleryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(channelId?: number | undefined): Promise<StandardGroupDto[]> {
        let url_ = this.baseUrl + "/api/Gallery/all?";
        if (channelId === null)
            throw new Error("The parameter 'channelId' cannot be null.");
        else if (channelId !== undefined)
            url_ += "channelId=" + encodeURIComponent("" + channelId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: Response): Promise<StandardGroupDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StandardGroupDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StandardGroupDto[]>(<any>null);
    }
}

export interface IHealthClient {
    getBackendHealth(): Promise<boolean>;
    getCancelTest(): Promise<boolean>;
}

export class HealthClient extends ClientBase implements IHealthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBackendHealth(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Health";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetBackendHealth(_response));
        });
    }

    protected processGetBackendHealth(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    getCancelTest(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Health/cancel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCancelTest(_response));
        });
    }

    protected processGetCancelTest(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IRoundClient {
    getRound(id: number): Promise<ActiveRoundDto>;
}

export class RoundClient extends ClientBase implements IRoundClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getRound(id: number): Promise<ActiveRoundDto> {
        let url_ = this.baseUrl + "/api/Round/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetRound(_response));
        });
    }

    protected processGetRound(response: Response): Promise<ActiveRoundDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActiveRoundDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ActiveRoundDto>(<any>null);
    }
}

export interface ISlashClient {
    blockResponse(payload?: string | null | undefined): Promise<BlockResponse>;
}

export class SlashClient extends ClientBase implements ISlashClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    blockResponse(payload?: string | null | undefined): Promise<BlockResponse> {
        let url_ = this.baseUrl + "/api/Slash/coffee-group-done";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (payload !== null && payload !== undefined)
            content_.append("Payload", payload.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processBlockResponse(_response));
        });
    }

    protected processBlockResponse(response: Response): Promise<BlockResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BlockResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BlockResponse>(<any>null);
    }
}

export interface IStatsClient {
    getMemberStats(channelId?: number | undefined): Promise<StatsDto[]>;
}

export class StatsClient extends ClientBase implements IStatsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getMemberStats(channelId?: number | undefined): Promise<StatsDto[]> {
        let url_ = this.baseUrl + "/api/Stats?";
        if (channelId === null)
            throw new Error("The parameter 'channelId' cannot be null.");
        else if (channelId !== undefined)
            url_ += "channelId=" + encodeURIComponent("" + channelId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMemberStats(_response));
        });
    }

    protected processGetMemberStats(response: Response): Promise<StatsDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StatsDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StatsDto[]>(<any>null);
    }
}

export class AuthUser implements IAuthUser {
    slackUserId?: string | null;
    slackToken?: string | null;
    email?: string | null;

    constructor(data?: IAuthUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slackUserId = _data["slackUserId"] !== undefined ? _data["slackUserId"] : <any>null;
            this.slackToken = _data["slackToken"] !== undefined ? _data["slackToken"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
        }
    }

    static fromJS(data: any): AuthUser {
        data = typeof data === 'object' ? data : {};
        let result = new AuthUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slackUserId"] = this.slackUserId !== undefined ? this.slackUserId : <any>null;
        data["slackToken"] = this.slackToken !== undefined ? this.slackToken : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data; 
    }
}

export interface IAuthUser {
    slackUserId?: string | null;
    slackToken?: string | null;
    email?: string | null;
}

export class ChannelSettingsDto implements IChannelSettingsDto {
    groupSize?: number;
    startsDay?: DayOfWeek;
    weekRepeat?: number;
    durationInDays?: number;
    individualMessage?: boolean;

    constructor(data?: IChannelSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupSize = _data["groupSize"] !== undefined ? _data["groupSize"] : <any>null;
            this.startsDay = _data["startsDay"] !== undefined ? _data["startsDay"] : <any>null;
            this.weekRepeat = _data["weekRepeat"] !== undefined ? _data["weekRepeat"] : <any>null;
            this.durationInDays = _data["durationInDays"] !== undefined ? _data["durationInDays"] : <any>null;
            this.individualMessage = _data["individualMessage"] !== undefined ? _data["individualMessage"] : <any>null;
        }
    }

    static fromJS(data: any): ChannelSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSize"] = this.groupSize !== undefined ? this.groupSize : <any>null;
        data["startsDay"] = this.startsDay !== undefined ? this.startsDay : <any>null;
        data["weekRepeat"] = this.weekRepeat !== undefined ? this.weekRepeat : <any>null;
        data["durationInDays"] = this.durationInDays !== undefined ? this.durationInDays : <any>null;
        data["individualMessage"] = this.individualMessage !== undefined ? this.individualMessage : <any>null;
        return data; 
    }
}

export interface IChannelSettingsDto {
    groupSize?: number;
    startsDay?: DayOfWeek;
    weekRepeat?: number;
    durationInDays?: number;
    individualMessage?: boolean;
}

export class ChannelSettingsIdDto extends ChannelSettingsDto implements IChannelSettingsIdDto {
    id?: number;
    slackChannelId?: string | null;
    slackChannelName?: string | null;
    paused?: boolean;

    constructor(data?: IChannelSettingsIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.slackChannelId = _data["slackChannelId"] !== undefined ? _data["slackChannelId"] : <any>null;
            this.slackChannelName = _data["slackChannelName"] !== undefined ? _data["slackChannelName"] : <any>null;
            this.paused = _data["paused"] !== undefined ? _data["paused"] : <any>null;
        }
    }

    static fromJS(data: any): ChannelSettingsIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSettingsIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["slackChannelId"] = this.slackChannelId !== undefined ? this.slackChannelId : <any>null;
        data["slackChannelName"] = this.slackChannelName !== undefined ? this.slackChannelName : <any>null;
        data["paused"] = this.paused !== undefined ? this.paused : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IChannelSettingsIdDto extends IChannelSettingsDto {
    id?: number;
    slackChannelId?: string | null;
    slackChannelName?: string | null;
    paused?: boolean;
}

export enum DayOfWeek {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
}

export class UpdateChannelPauseCommand implements IUpdateChannelPauseCommand {
    input?: UpdateChannelPauseInput | null;

    constructor(data?: IUpdateChannelPauseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.input = data.input && !(<any>data.input).toJSON ? new UpdateChannelPauseInput(data.input) : <UpdateChannelPauseInput>this.input; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.input = _data["input"] ? UpdateChannelPauseInput.fromJS(_data["input"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateChannelPauseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateChannelPauseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["input"] = this.input ? this.input.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateChannelPauseCommand {
    input?: IUpdateChannelPauseInput | null;
}

export class UpdateChannelPauseInput implements IUpdateChannelPauseInput {
    channelId?: number;
    paused?: boolean;

    constructor(data?: IUpdateChannelPauseInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.channelId = _data["channelId"] !== undefined ? _data["channelId"] : <any>null;
            this.paused = _data["paused"] !== undefined ? _data["paused"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateChannelPauseInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateChannelPauseInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId !== undefined ? this.channelId : <any>null;
        data["paused"] = this.paused !== undefined ? this.paused : <any>null;
        return data; 
    }
}

export interface IUpdateChannelPauseInput {
    channelId?: number;
    paused?: boolean;
}

export class UpdateChannelSettingsCommand implements IUpdateChannelSettingsCommand {
    settings?: ChannelSettingsDto | null;

    constructor(data?: IUpdateChannelSettingsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.settings = data.settings && !(<any>data.settings).toJSON ? new ChannelSettingsDto(data.settings) : <ChannelSettingsDto>this.settings; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.settings = _data["settings"] ? ChannelSettingsDto.fromJS(_data["settings"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateChannelSettingsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateChannelSettingsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["settings"] = this.settings ? this.settings.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateChannelSettingsCommand {
    settings?: IChannelSettingsDto | null;
}

export class RoundSnipDto implements IRoundSnipDto {
    id?: number;
    channelId?: number;
    slackChannelId?: string | null;
    active?: boolean;
    startDate?: Date;
    endDate?: Date;
    meetupPercentage?: number;
    photoPercentage?: number;

    constructor(data?: IRoundSnipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.channelId = _data["channelId"] !== undefined ? _data["channelId"] : <any>null;
            this.slackChannelId = _data["slackChannelId"] !== undefined ? _data["slackChannelId"] : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
            this.meetupPercentage = _data["meetupPercentage"] !== undefined ? _data["meetupPercentage"] : <any>null;
            this.photoPercentage = _data["photoPercentage"] !== undefined ? _data["photoPercentage"] : <any>null;
        }
    }

    static fromJS(data: any): RoundSnipDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoundSnipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["channelId"] = this.channelId !== undefined ? this.channelId : <any>null;
        data["slackChannelId"] = this.slackChannelId !== undefined ? this.slackChannelId : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["meetupPercentage"] = this.meetupPercentage !== undefined ? this.meetupPercentage : <any>null;
        data["photoPercentage"] = this.photoPercentage !== undefined ? this.photoPercentage : <any>null;
        return data; 
    }
}

export interface IRoundSnipDto {
    id?: number;
    channelId?: number;
    slackChannelId?: string | null;
    active?: boolean;
    startDate?: Date;
    endDate?: Date;
    meetupPercentage?: number;
    photoPercentage?: number;
}

export class ActiveRoundDto implements IActiveRoundDto {
    id?: number;
    channelId?: number;
    slackChannelId?: string | null;
    active?: boolean;
    startDate?: Date;
    endDate?: Date;
    groups?: ActiveRoundGroupDto[] | null;
    previousMeetup?: number | null;
    previousPhoto?: number | null;
    previousId?: number | null;
    nextId?: number | null;

    constructor(data?: IActiveRoundDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.groups) {
                this.groups = [];
                for (let i = 0; i < data.groups.length; i++) {
                    let item = data.groups[i];
                    this.groups[i] = item && !(<any>item).toJSON ? new ActiveRoundGroupDto(item) : <ActiveRoundGroupDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.channelId = _data["channelId"] !== undefined ? _data["channelId"] : <any>null;
            this.slackChannelId = _data["slackChannelId"] !== undefined ? _data["slackChannelId"] : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(ActiveRoundGroupDto.fromJS(item));
            }
            this.previousMeetup = _data["previousMeetup"] !== undefined ? _data["previousMeetup"] : <any>null;
            this.previousPhoto = _data["previousPhoto"] !== undefined ? _data["previousPhoto"] : <any>null;
            this.previousId = _data["previousId"] !== undefined ? _data["previousId"] : <any>null;
            this.nextId = _data["nextId"] !== undefined ? _data["nextId"] : <any>null;
        }
    }

    static fromJS(data: any): ActiveRoundDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveRoundDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["channelId"] = this.channelId !== undefined ? this.channelId : <any>null;
        data["slackChannelId"] = this.slackChannelId !== undefined ? this.slackChannelId : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        data["previousMeetup"] = this.previousMeetup !== undefined ? this.previousMeetup : <any>null;
        data["previousPhoto"] = this.previousPhoto !== undefined ? this.previousPhoto : <any>null;
        data["previousId"] = this.previousId !== undefined ? this.previousId : <any>null;
        data["nextId"] = this.nextId !== undefined ? this.nextId : <any>null;
        return data; 
    }
}

export interface IActiveRoundDto {
    id?: number;
    channelId?: number;
    slackChannelId?: string | null;
    active?: boolean;
    startDate?: Date;
    endDate?: Date;
    groups?: IActiveRoundGroupDto[] | null;
    previousMeetup?: number | null;
    previousPhoto?: number | null;
    previousId?: number | null;
    nextId?: number | null;
}

export class ActiveRoundGroupDto implements IActiveRoundGroupDto {
    id?: number;
    slackMessageId?: string | null;
    hasMet?: boolean;
    hasPhoto?: boolean;
    finishedAt?: Date | null;
    notificationCount?: number;
    photoUrl?: string | null;
    coffeeRoundId?: number;
    members?: string[] | null;

    constructor(data?: IActiveRoundGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.slackMessageId = _data["slackMessageId"] !== undefined ? _data["slackMessageId"] : <any>null;
            this.hasMet = _data["hasMet"] !== undefined ? _data["hasMet"] : <any>null;
            this.hasPhoto = _data["hasPhoto"] !== undefined ? _data["hasPhoto"] : <any>null;
            this.finishedAt = _data["finishedAt"] ? new Date(_data["finishedAt"].toString()) : <any>null;
            this.notificationCount = _data["notificationCount"] !== undefined ? _data["notificationCount"] : <any>null;
            this.photoUrl = _data["photoUrl"] !== undefined ? _data["photoUrl"] : <any>null;
            this.coffeeRoundId = _data["coffeeRoundId"] !== undefined ? _data["coffeeRoundId"] : <any>null;
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(item);
            }
        }
    }

    static fromJS(data: any): ActiveRoundGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveRoundGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["slackMessageId"] = this.slackMessageId !== undefined ? this.slackMessageId : <any>null;
        data["hasMet"] = this.hasMet !== undefined ? this.hasMet : <any>null;
        data["hasPhoto"] = this.hasPhoto !== undefined ? this.hasPhoto : <any>null;
        data["finishedAt"] = this.finishedAt ? this.finishedAt.toISOString() : <any>null;
        data["notificationCount"] = this.notificationCount !== undefined ? this.notificationCount : <any>null;
        data["photoUrl"] = this.photoUrl !== undefined ? this.photoUrl : <any>null;
        data["coffeeRoundId"] = this.coffeeRoundId !== undefined ? this.coffeeRoundId : <any>null;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }
}

export interface IActiveRoundGroupDto {
    id?: number;
    slackMessageId?: string | null;
    hasMet?: boolean;
    hasPhoto?: boolean;
    finishedAt?: Date | null;
    notificationCount?: number;
    photoUrl?: string | null;
    coffeeRoundId?: number;
    members?: string[] | null;
}

export class EventInput implements IEventInput {
    token?: string | null;
    challenge?: string | null;
    team_id?: string | null;
    api_app_id?: string | null;
    event?: Event | null;
    type?: string | null;
    event_id?: string | null;
    event_time?: number;
    authorizations?: Authorization[] | null;
    is_ext_shared_channel?: boolean;
    event_context?: string | null;

    constructor(data?: IEventInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.event = data.event && !(<any>data.event).toJSON ? new Event(data.event) : <Event>this.event; 
            if (data.authorizations) {
                this.authorizations = [];
                for (let i = 0; i < data.authorizations.length; i++) {
                    let item = data.authorizations[i];
                    this.authorizations[i] = item && !(<any>item).toJSON ? new Authorization(item) : <Authorization>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
            this.challenge = _data["challenge"] !== undefined ? _data["challenge"] : <any>null;
            this.team_id = _data["team_id"] !== undefined ? _data["team_id"] : <any>null;
            this.api_app_id = _data["api_app_id"] !== undefined ? _data["api_app_id"] : <any>null;
            this.event = _data["event"] ? Event.fromJS(_data["event"]) : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.event_id = _data["event_id"] !== undefined ? _data["event_id"] : <any>null;
            this.event_time = _data["event_time"] !== undefined ? _data["event_time"] : <any>null;
            if (Array.isArray(_data["authorizations"])) {
                this.authorizations = [] as any;
                for (let item of _data["authorizations"])
                    this.authorizations!.push(Authorization.fromJS(item));
            }
            this.is_ext_shared_channel = _data["is_ext_shared_channel"] !== undefined ? _data["is_ext_shared_channel"] : <any>null;
            this.event_context = _data["event_context"] !== undefined ? _data["event_context"] : <any>null;
        }
    }

    static fromJS(data: any): EventInput {
        data = typeof data === 'object' ? data : {};
        let result = new EventInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        data["challenge"] = this.challenge !== undefined ? this.challenge : <any>null;
        data["team_id"] = this.team_id !== undefined ? this.team_id : <any>null;
        data["api_app_id"] = this.api_app_id !== undefined ? this.api_app_id : <any>null;
        data["event"] = this.event ? this.event.toJSON() : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["event_id"] = this.event_id !== undefined ? this.event_id : <any>null;
        data["event_time"] = this.event_time !== undefined ? this.event_time : <any>null;
        if (Array.isArray(this.authorizations)) {
            data["authorizations"] = [];
            for (let item of this.authorizations)
                data["authorizations"].push(item.toJSON());
        }
        data["is_ext_shared_channel"] = this.is_ext_shared_channel !== undefined ? this.is_ext_shared_channel : <any>null;
        data["event_context"] = this.event_context !== undefined ? this.event_context : <any>null;
        return data; 
    }
}

export interface IEventInput {
    token?: string | null;
    challenge?: string | null;
    team_id?: string | null;
    api_app_id?: string | null;
    event?: IEvent | null;
    type?: string | null;
    event_id?: string | null;
    event_time?: number;
    authorizations?: IAuthorization[] | null;
    is_ext_shared_channel?: boolean;
    event_context?: string | null;
}

export class Event implements IEvent {
    type?: string | null;
    channel_id?: string | null;
    file_id?: string | null;
    user_id?: string | null;
    file?: File | null;
    event_ts?: string | null;

    constructor(data?: IEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.file = data.file && !(<any>data.file).toJSON ? new File(data.file) : <File>this.file; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.channel_id = _data["channel_id"] !== undefined ? _data["channel_id"] : <any>null;
            this.file_id = _data["file_id"] !== undefined ? _data["file_id"] : <any>null;
            this.user_id = _data["user_id"] !== undefined ? _data["user_id"] : <any>null;
            this.file = _data["file"] ? File.fromJS(_data["file"]) : <any>null;
            this.event_ts = _data["event_ts"] !== undefined ? _data["event_ts"] : <any>null;
        }
    }

    static fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["channel_id"] = this.channel_id !== undefined ? this.channel_id : <any>null;
        data["file_id"] = this.file_id !== undefined ? this.file_id : <any>null;
        data["user_id"] = this.user_id !== undefined ? this.user_id : <any>null;
        data["file"] = this.file ? this.file.toJSON() : <any>null;
        data["event_ts"] = this.event_ts !== undefined ? this.event_ts : <any>null;
        return data; 
    }
}

export interface IEvent {
    type?: string | null;
    channel_id?: string | null;
    file_id?: string | null;
    user_id?: string | null;
    file?: IFile | null;
    event_ts?: string | null;
}

export class File implements IFile {
    id?: string | null;

    constructor(data?: IFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): File {
        data = typeof data === 'object' ? data : {};
        let result = new File();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IFile {
    id?: string | null;
}

export class Authorization implements IAuthorization {
    enterprise_id?: any | null;
    team_id?: string | null;
    user_id?: string | null;
    is_bot?: boolean;
    is_enterprise_install?: boolean;

    constructor(data?: IAuthorization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enterprise_id = _data["enterprise_id"] !== undefined ? _data["enterprise_id"] : <any>null;
            this.team_id = _data["team_id"] !== undefined ? _data["team_id"] : <any>null;
            this.user_id = _data["user_id"] !== undefined ? _data["user_id"] : <any>null;
            this.is_bot = _data["is_bot"] !== undefined ? _data["is_bot"] : <any>null;
            this.is_enterprise_install = _data["is_enterprise_install"] !== undefined ? _data["is_enterprise_install"] : <any>null;
        }
    }

    static fromJS(data: any): Authorization {
        data = typeof data === 'object' ? data : {};
        let result = new Authorization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enterprise_id"] = this.enterprise_id !== undefined ? this.enterprise_id : <any>null;
        data["team_id"] = this.team_id !== undefined ? this.team_id : <any>null;
        data["user_id"] = this.user_id !== undefined ? this.user_id : <any>null;
        data["is_bot"] = this.is_bot !== undefined ? this.is_bot : <any>null;
        data["is_enterprise_install"] = this.is_enterprise_install !== undefined ? this.is_enterprise_install : <any>null;
        return data; 
    }
}

export interface IAuthorization {
    enterprise_id?: any | null;
    team_id?: string | null;
    user_id?: string | null;
    is_bot?: boolean;
    is_enterprise_install?: boolean;
}

export class StandardGroupDto implements IStandardGroupDto {
    id?: number;
    hasMet?: boolean;
    hasPhoto?: boolean;
    photoUrl?: string | null;
    finishedAt?: Date;
    members?: string[] | null;

    constructor(data?: IStandardGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hasMet = _data["hasMet"] !== undefined ? _data["hasMet"] : <any>null;
            this.hasPhoto = _data["hasPhoto"] !== undefined ? _data["hasPhoto"] : <any>null;
            this.photoUrl = _data["photoUrl"] !== undefined ? _data["photoUrl"] : <any>null;
            this.finishedAt = _data["finishedAt"] ? new Date(_data["finishedAt"].toString()) : <any>null;
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(item);
            }
        }
    }

    static fromJS(data: any): StandardGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new StandardGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hasMet"] = this.hasMet !== undefined ? this.hasMet : <any>null;
        data["hasPhoto"] = this.hasPhoto !== undefined ? this.hasPhoto : <any>null;
        data["photoUrl"] = this.photoUrl !== undefined ? this.photoUrl : <any>null;
        data["finishedAt"] = this.finishedAt ? this.finishedAt.toISOString() : <any>null;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }
}

export interface IStandardGroupDto {
    id?: number;
    hasMet?: boolean;
    hasPhoto?: boolean;
    photoUrl?: string | null;
    finishedAt?: Date;
    members?: string[] | null;
}

export class BlockResponse implements IBlockResponse {
    response_type?: string | null;
    text?: string | null;
    replace_original?: boolean;
    delete_original?: boolean;

    constructor(data?: IBlockResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response_type = _data["response_type"] !== undefined ? _data["response_type"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.replace_original = _data["replace_original"] !== undefined ? _data["replace_original"] : <any>null;
            this.delete_original = _data["delete_original"] !== undefined ? _data["delete_original"] : <any>null;
        }
    }

    static fromJS(data: any): BlockResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BlockResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response_type"] = this.response_type !== undefined ? this.response_type : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["replace_original"] = this.replace_original !== undefined ? this.replace_original : <any>null;
        data["delete_original"] = this.delete_original !== undefined ? this.delete_original : <any>null;
        return data; 
    }
}

export interface IBlockResponse {
    response_type?: string | null;
    text?: string | null;
    replace_original?: boolean;
    delete_original?: boolean;
}

export class StatsDto implements IStatsDto {
    slackMemberId?: string | null;
    slackMemberName?: string | null;
    meepupPercent?: number;
    photoPercent?: number;
    totalParticipation?: number;

    constructor(data?: IStatsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.slackMemberId = _data["slackMemberId"] !== undefined ? _data["slackMemberId"] : <any>null;
            this.slackMemberName = _data["slackMemberName"] !== undefined ? _data["slackMemberName"] : <any>null;
            this.meepupPercent = _data["meepupPercent"] !== undefined ? _data["meepupPercent"] : <any>null;
            this.photoPercent = _data["photoPercent"] !== undefined ? _data["photoPercent"] : <any>null;
            this.totalParticipation = _data["totalParticipation"] !== undefined ? _data["totalParticipation"] : <any>null;
        }
    }

    static fromJS(data: any): StatsDto {
        data = typeof data === 'object' ? data : {};
        let result = new StatsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slackMemberId"] = this.slackMemberId !== undefined ? this.slackMemberId : <any>null;
        data["slackMemberName"] = this.slackMemberName !== undefined ? this.slackMemberName : <any>null;
        data["meepupPercent"] = this.meepupPercent !== undefined ? this.meepupPercent : <any>null;
        data["photoPercent"] = this.photoPercent !== undefined ? this.photoPercent : <any>null;
        data["totalParticipation"] = this.totalParticipation !== undefined ? this.totalParticipation : <any>null;
        return data; 
    }
}

export interface IStatsDto {
    slackMemberId?: string | null;
    slackMemberName?: string | null;
    meepupPercent?: number;
    photoPercent?: number;
    totalParticipation?: number;
}

export enum CommandErrorCode {
    AbstractComparisonValidator = 0,
    AsyncPredicateValidator = 1,
    AsyncValidatorBase = 2,
    ChildValidatorAdaptor = 3,
    CreditCardValidator = 4,
    CustomValidator = 5,
    EmailValidator = 6,
    EmptyValidator = 7,
    EnumValidator = 8,
    EqualValidator = 9,
    ExclusiveBetweenValidator = 10,
    GreaterThanOrEqualValidator = 11,
    GreaterThanValidator = 12,
    IPropertyValidator = 13,
    InclusiveBetweenValidator = 14,
    LengthValidator = 15,
    LessThanOrEqualValidator = 16,
    LessThanValidator = 17,
    NoopPropertyValidator = 18,
    NotEmptyValidator = 19,
    NotEqualValidator = 20,
    NotNullValidator = 21,
    NullValidator = 22,
    OnFailureValidator = 23,
    PolymorphicValidator = 24,
    PredicateValidator = 25,
    PropertyValidator = 26,
    PropertyValidatorContext = 27,
    RegularExpressionValidator = 28,
    ScalePrecisionValidator = 29,
    StringEnumValidator = 30,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

/* istanbul ignore file */

/**
 * Used during client configuration.
 */

/**
 * Any public method are meant to be used after the individual client has been initialized
 */